#include <bits/stdc++.h>
using namespace std;

using namespace std;

void findMedian(int arr[], int n)
{
    priority_queue<int> lowerHalf;
    priority_queue<int, vector<int>, greater<int>> higherHalf;

    int median;

    //size is the size of the current stream
    for(int size=1; size<=n; size++)
    {
        if(!lowerHalf.empty() && lowerHalf.top() > arr[size-1])
        {
            lowerHalf.push(arr[size-1]);

            if(lowerHalf.size() > higherHalf.size() + 1)
            {
                higherHalf.push(lowerHalf.top());
                lowerHalf.pop();
            }
        }
        else
        {
            higherHalf.push(arr[size-1]);

            if(higherHalf.size() > lowerHalf.size() + 1)
            {
                lowerHalf.push(higherHalf.top());
                higherHalf.pop();
            }
        }

        if(size%2 == 1)
        {
            if(higherHalf.size() > lowerHalf.size())
            {
                median = higherHalf.top();
            }
            else
            {
                median = lowerHalf.top();
            }
        }
        else
        {
            median = (lowerHalf.top() + higherHalf.top())/2;
        }

        cout << median << endl;
    }
}


int main()
{
    
    int n;
    cin >> n;
    int* arr = new int[n];
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }
    cout << "running medians : " << endl;
    findMedian(arr,n);

    return 0;
       
}
